@using EMS.DataAccess.Data
@model EMS.Web.UI.Areas.Student.Models.CourseResultViewModel
@if (Model.ResultClassSettingList.Count == 0)
{
    <div class="alert alert-danger fade in radius-bordered alert-shadowed">
        <i class="fa-fw fa fa-times"></i>
        <strong>Not Found!</strong> There is no Result in this Course.
    </div>
}
else
{
    <div>
        @foreach (var resultClassSetting in Model.ResultClassSettingList)
        {
            <table class="table table-striped table-bordered">
                <tr>
                    <td colspan="6" class="text-center"><h4>@resultClassSetting.Name</h4></td>
                </tr>
                @{
                    var classRes = Model.ResultClassList.SingleOrDefault(x => x.ResultClassSettingId == resultClassSetting.Id);
                    if (classRes != null)
                    {
                        <tr>
                            <th colspan="3" class="text-left">@resultClassSetting.Name</th>
                            <th colspan="3" class="text-left">Result: @*@classRes.Grade (@classRes.GradePoint)*@</th>

                        </tr>
                    }
                }
                <tr>
                    <th class="text-center">Area of Marking</th>
                    <th class="text-center" style="width: 100px;">Total Mark</th>
                    <th class="text-center" style="width: 100px;">Best</th>
                    <th class="text-center" style="width: 100px;">Mark Obtain</th>
                    
                    <th class="text-center" style="width: 120px;">Contributed %</th>
                   
                    <th class="text-center">Faculty Name</th>
                </tr>

                

                @foreach (var componentSetting in Model.ResultComponentSettingList
                    .Where(x => x.ResultClassSettingId == resultClassSetting.Id
                    //&& (x.TestType==Aca_MarkDistributionPolicyComponent.TestTypeEnum.Attendance
                    //|| x.TestType == Aca_MarkDistributionPolicyComponent.TestTypeEnum.ClassTest
                    //|| x.TestType == Aca_MarkDistributionPolicyComponent.TestTypeEnum.Observation
                    //)

                    )
                    .OrderBy(x => x.TestTypeEnumId))
                {
                    <tr>
                        <td class="text-center"><strong>@componentSetting.Name</strong></td>
                        <td class="text-center"><strong>@componentSetting.TotalMark</strong></td>
                        <td class="text-center">
                            @if (componentSetting.BestCount > 0)
                            {
                                <span  class="badge badge-success">@componentSetting.BestCount</span>
                            }
                        </td>
                      
                        <td class="text-center">
                            @foreach (var component in Model.ResultComponentList
                    .Where(x => x.ResultComponetSettingId == componentSetting.Id))
                            {
                                if ((componentSetting.TestTypeEnumId == (byte)Aca_MarkDistributionPolicyComponent.TestTypeEnum.Attendance
                                    || componentSetting.TestTypeEnumId == (byte)Aca_MarkDistributionPolicyComponent.TestTypeEnum.Observation)
                                    //&& componentSetting.IsLockedScrutinizer
                                    )
                                {
                                    <span  class="badge badge-primary">-</span>
                                }
                                else if (componentSetting.IsLockedExaminer)
                                {
                                    <span  class="badge badge-primary">@component.Mark.ToString("F")</span>
                                }
                                else
                                {
                                    <span  class="badge badge-primary">-</span>
                                }
                            }
                        </td>

                        <td class="text-center">@componentSetting.ConvertPercentage%</td>
                     
                        <td class="text-center">&nbsp;</td>
                    </tr>
                    foreach (var componentBreakdownSetting in Model.ResultComponentBreakdownSettingList
                        .Where(x => x.ResultComponentSettingId == componentSetting.Id)
                        .OrderBy(x => x.Name))
                    {
                        <tr>
                            <td class="text-center">@componentBreakdownSetting.Name</td>
                           
                            <td class="text-center">@componentBreakdownSetting.TotalMark</td>
                            <td class="text-center">&nbsp;</td>
                            <td class="text-center">
                                @foreach (var componentBreakdown in Model.ResultComponentBreakdownList
                                    .Where(x => x.ResultBreakdownSettingId == componentBreakdownSetting.Id))
                                {
                                    <span  class="badge badge-primary">@componentBreakdown.Mark.ToString("F")</span>
                                }
                            </td>
                            <td class="text-center">@componentBreakdownSetting.ConvertPercentage%</td>
                          
                            <td class="text-center">@componentBreakdownSetting.FacultyName</td>
                        </tr>
                    }
                }
            </table>
        }
    </div>
}