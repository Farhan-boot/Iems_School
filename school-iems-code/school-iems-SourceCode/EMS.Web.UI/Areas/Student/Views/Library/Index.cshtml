<!--File:Lib_Book List View-->
@using EMS.DataAccess.Data;
@{
    ViewBag.Title = "Book Search";

    // Angular Properties
    var id = Request.QueryString["id"];//ViewContext.RouteData.Values["id"];
    var BookId = (string)id == null ? "0" : (string)id;

    //WebApi link for single row
    var getBookByIdUrl = Url.HttpRouteUrl("DefaultApi", new { controller = "LibraryStudentApi", action = "GetBookById", area = "Student" });
    var getBookDataExtraUrl = Url.HttpRouteUrl("DefaultApi", new { controller = "LibraryStudentApi", action = "GetBookDataExtra", area = "Student" });
    var saveBookUrl = Url.HttpRouteUrl("DefaultApi", new { controller = "LibraryStudentApi", action = "SaveBook", area = "Student" });
    var deleteBookByIdUrl = Url.HttpRouteUrl("DefaultApi", new { controller = "LibraryStudentApi", action = "GetDeleteBookById", area = "Student" });

    //WebApi link for List
    var getPagedBookUrl = Url.HttpRouteUrl("DefaultApi", new { controller = "LibraryStudentApi", action = "GetPagedBook", area = "Student" });
    var getAllBookUrl = Url.HttpRouteUrl("DefaultApi", new { controller = "LibraryStudentApi", action = "GetAllBook", area = "Student" });
    var saveBookListUrl = Url.HttpRouteUrl("DefaultApi", new { controller = "LibraryStudentApi", action = "SaveBookList", area = "Student" });
    var getBookListDataExtraUrl = Url.HttpRouteUrl("DefaultApi", new { controller = "LibraryStudentApi", action = "GetBookListDataExtra", area = "Student" });

    var editBookByIdPageUrl = Url.Action("BookAddEdit", "Book", new { area = "Student" });
    var editBookCopyByIdPageUrl = Url.Action("BookCopyAddEdit", "BookCopy", new { area = "Student" });

    //Angular Function Name
    var getNewBook = "getNewBook";
    var saveBook = "saveBook";
    var deleteBookById = "deleteBookById";
    var deleteBookByObj = "deleteBookByObj";
    //for list
    var searchBookList = "searchBookList";
    var getPagedBookList = "getPagedBookList";
    var getAllBookList = "getAllBookList";
    var saveBookList = "saveBookList";
    var getBookListExtraData = "getBookListExtraData";

    var refreshPage = "loadPage()";

}
@section StyleSection
{
    <style>
        #pinBoot {
          position: relative;
          max-width: 100%;
          width: 100%;
        }
        img {
          width: 100%;
          max-width: 100%;
          height: auto;
        }
        .white-panel {
          position: absolute;
          background: white;
          box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.3);
          padding: 10px;
        }
        /*
        stylize any heading tags withing white-panel below
        */

        .white-panel h1 {
          font-size: 1em;
        }
        .white-panel h1 a {
          color: #A92733;
        }
        .white-panel:hover {
          box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.5);
          margin-top: -5px;
          -webkit-transition: all 0.3s ease-in-out;
          -moz-transition: all 0.3s ease-in-out;
          -o-transition: all 0.3s ease-in-out;
          transition: all 0.3s ease-in-out;
        }
    </style>
}
@section ScriptSection
{
    <script src="~/Areas/Student/Views/Library/Index.js"></script>
    <script>
        $(document).ready(function () {
            $('#pinBoot').pinterest_grid({
                no_columns: 4,
                padding_x: 10,
                padding_y: 10,
                margin_bottom: 50,
                single_column_breakpoint: 700
            });
        });

        /*
        Ref:
        Thanks to:
        http://www.jqueryscript.net/layout/Simple-jQuery-Plugin-To-Create-Pinterest-Style-Grid-Layout-Pinterest-Grid.html
        */


        /*
            Pinterest Grid Plugin
            Copyright 2014 Mediademons
            author smm 16/04/2014

            usage:

             $(document).ready(function() {

                $('#blog-landing').pinterest_grid({
                    no_columns: 4
                });

            });


        */
        ; (function ($, window, document, undefined) {
            var pluginName = 'pinterest_grid',
                defaults = {
                    padding_x: 10,
                    padding_y: 10,
                    no_columns: 3,
                    margin_bottom: 50,
                    single_column_breakpoint: 700
                },
                columns,
                $article,
                article_width;

            function Plugin(element, options) {
                this.element = element;
                this.options = $.extend({}, defaults, options);
                this._defaults = defaults;
                this._name = pluginName;
                this.init();
            }

            Plugin.prototype.init = function () {
                var self = this,
                    resize_finish;

                $(window).resize(function () {
                    clearTimeout(resize_finish);
                    resize_finish = setTimeout(function () {
                        self.make_layout_change(self);
                    }, 11);
                });

                self.make_layout_change(self);

                setTimeout(function () {
                    $(window).resize();
                }, 500);
            };

            Plugin.prototype.calculate = function (single_column_mode) {
                var self = this,
                    tallest = 0,
                    row = 0,
                    $container = $(this.element),
                    container_width = $container.width();
                $article = $(this.element).children();

                if (single_column_mode === true) {
                    article_width = $container.width() - self.options.padding_x;
                } else {
                    article_width = ($container.width() - self.options.padding_x * self.options.no_columns) / self.options.no_columns;
                }

                $article.each(function () {
                    $(this).css('width', article_width);
                });

                columns = self.options.no_columns;

                $article.each(function (index) {
                    var current_column,
                        left_out = 0,
                        top = 0,
                        $this = $(this),
                        prevAll = $this.prevAll(),
                        tallest = 0;

                    if (single_column_mode === false) {
                        current_column = (index % columns);
                    } else {
                        current_column = 0;
                    }

                    for (var t = 0; t < columns; t++) {
                        $this.removeClass('c' + t);
                    }

                    if (index % columns === 0) {
                        row++;
                    }

                    $this.addClass('c' + current_column);
                    $this.addClass('r' + row);

                    prevAll.each(function (index) {
                        if ($(this).hasClass('c' + current_column)) {
                            top += $(this).outerHeight() + self.options.padding_y;
                        }
                    });

                    if (single_column_mode === true) {
                        left_out = 0;
                    } else {
                        left_out = (index % columns) * (article_width + self.options.padding_x);
                    }

                    $this.css({
                        'left': left_out,
                        'top': top
                    });
                });

                this.tallest($container);
                $(window).resize();
            };

            Plugin.prototype.tallest = function (_container) {
                var column_heights = [],
                    largest = 0;

                for (var z = 0; z < columns; z++) {
                    var temp_height = 0;
                    _container.find('.c' + z).each(function () {
                        temp_height += $(this).outerHeight();
                    });
                    column_heights[z] = temp_height;
                }

                largest = Math.max.apply(Math, column_heights);
                _container.css('height', largest + (this.options.padding_y + this.options.margin_bottom));
            };

            Plugin.prototype.make_layout_change = function (_self) {
                if ($(window).width() < _self.options.single_column_breakpoint) {
                    _self.calculate(true);
                } else {
                    _self.calculate(false);
                }
            };

            $.fn[pluginName] = function (options) {
                return this.each(function () {
                    if (!$.data(this, 'plugin_' + pluginName)) {
                        $.data(this, 'plugin_' + pluginName,
                        new Plugin(this, options));
                    }
                });
            }

        })(jQuery, window, document);
    </script>
}


<div ng-controller="BookListCtrl"
     ng-init="Init(
      '@getPagedBookUrl'
     ,'@deleteBookByIdUrl'
     ,'@getBookListDataExtraUrl'
     ,'@saveBookListUrl'
     ,'@getBookByIdUrl'
     ,'@getBookDataExtraUrl'
     ,'@saveBookUrl'
     )">
    <div class="widget">

        <div class="widget-header bordered-bottom bordered-sky ">
            <i class="widget-icon fa fa-list bold  "></i>
            <span  class="widget-caption ">Manage Book </span>
            <div class="widget-buttons buttons-bordered no-padding-right">
                <span  class="widget-caption form-inline">
                    @*<span >Select Language</span>*@
                    <select ng-model="SelectedLanguageId" ng-change="@(searchBookList)()"
                            ng-options="option.Id as option.Name for option in LanguageList " ng-init="" class="form-control input-xs ">
                        <option value="" label="" class="">---Select All Language---</option>
                    </select>
                </span>
            </div>
            <div class="widget-buttons buttons-bordered no-padding-right">
                <span  class="input-icon">
                    <input type="text" ng-model="SearchText" ng-Enter="@(searchBookList)()" class="form-control input-xs " id="glyphicon-search" placeholder="Search Book" style="">
                    <i class="glyphicon glyphicon-search blue"></i>
                </span>
            </div>
            <div class="widget-buttons no-padding-left">
                <a target="_blank" href="@editBookByIdPageUrl?id=0" class="btn btn-xs btn-success"><i class="fa fa-plus"></i> Add New</a>
                <button ng-click="@refreshPage" class="btn btn-info btn-xs"><i class="fa fa-refresh"></i> Refresh</button>
            </div>
        </div>
        <div class="widget-body no-padding">
            <div class="table-footer no-print">
                @OptionControl()
            </div>
            <section id="pinBoot">
                <article class="white-panel" ng-repeat="row in BookList">
                    <img src="https://images-na.ssl-images-amazon.com/images/P/{{row.@Lib_Book.Property_ISBN}}.01.LZZZZZZZ.jpg" alt="">
                    <h4>{{row.@Lib_Book.Property_Title}}</h4>
                    {{row.@Lib_Book.Property_SubTitle}}<br />
                    {{row.@Lib_Book.Property_SubSubTitle}}
                    <h6>
                        {{row.@Lib_Book.Property_ISBN}}<br />
                        {{row.@Lib_Book.Property_Edition }}
                        {{row.@Lib_Book.Property_Pagination }}
                        {{row.@Lib_Book.Property_Size }}<br />
                        {{row.@Lib_Book.Property_Publisher}}
                        {{row.@Lib_Book.Property_PublicationPlace}}
                        {{row.@Lib_Book.Property_PublicationYear}}
                    </h6>
                    <p>
                        <span  class="badge badge-success">{{row.Lib_BookCopyCountAllowed}}</span> available |
                        <span  class="badge badge-info">{{row.Lib_BookCopyCount}}</span> total books
                    </p>
                </article>
            </section>
            @*<table class="table table-striped table-bordered">
                    <thead class="bordered-blue">
                        <tr>
                            <th class="text-center" style="display:none">
                                <input type="checkbox" ng-click="selectAll($event)">
                            </th>
                            <th class="text-center">SN</th>
                            <th class="text-center" style="width: 100px;">Image</th>
                            <th class="text-center">Title</th>
                            <th class="text-center">No. of Items</th>
                        </tr>
                    </thead>
                    <tbody>

                        <tr ng-repeat="row in BookList">
                            <td class="text-center" style="display:none">
                                <input type="checkbox" ng-model="row.@Lib_Book.Property_IsSelected" />
                            </td>
                            <td class="text-center">{{$index+1}}</td>
                            <td class="">
                                <img src="https://images-na.ssl-images-amazon.com/images/P/{{row.@Lib_Book.Property_ISBN}}.01.MZZZZZZZ.jpg" alt="" class="img-thumbnail">
                            </td>
                            <td class="">
                                <strong>{{row.@Lib_Book.Property_Title}}</strong><br />
                                {{row.@Lib_Book.Property_SubTitle}}<br />
                                {{row.@Lib_Book.Property_SubSubTitle}}
                                <h6>
                                    {{row.@Lib_Book.Property_ISBN}}<br />
                                    {{row.@Lib_Book.Property_Edition }}
                                    {{row.@Lib_Book.Property_Pagination }}
                                    {{row.@Lib_Book.Property_Size }}<br />
                                    {{row.@Lib_Book.Property_Publisher}}
                                    {{row.@Lib_Book.Property_PublicationPlace}}
                                    {{row.@Lib_Book.Property_PublicationYear}}
                                </h6>
                            </td>
                            <td class="text-right">
                                <a href="@(editBookCopyByIdPageUrl)/?bookId={{row.Id}}&bookCopyId=0">
                                    {{row.Lib_BookCopyCount}} total items
                                </a>
                                <br />{{row.Lib_BookCopyCountAllowed}} available
                                <br />{{row.Lib_BookCopyCountNotAllowed}} borrowed
                            </td>
                        </tr>
                    </tbody>
                </table>*@
            <div class="table-footer no-print">
                @OptionControl()
            </div>
        </div>
    </div>
</div>

@helper  OptionControl()
{
    <div class="row no-print">
        <div class="col-sm-4">
            <div class="form-inline pull-left">
                <div class="form-group">
                    <label ng-hide="totalServerItems==0">(Showing {{totalServerItems*(PageNo-1)+1}}-{{totalServerItems*PageNo}} of {{totalItems}})</label>
                    <label ng-show="totalServerItems==0" class="text-danger">No Data Found!</label>
                </div>
            </div>
        </div>
        <div class="col-sm-8">
            <div class="form-inline pull-right">
                <div class="form-group">
                    <label>Page Size</label>
                    <input ng-model="PageSize" ng-enter="changePageSize()" class="form-control input-opt" autocomplete="on" placeholder="Page Size" type="number" min="1">
                </div>
                <div class="form-group">
                    <label>Page No.</label>
                    <input ng-model="PageNo" ng-enter="changePageNo()" class="form-control input-opt" autocomplete="on" placeholder="Page No" type="number" min="1">
                    <label>of {{totalItems/PageSize| number:0}}</label>
                </div>
            </div>
        </div>
    </div>
}



